syntax = "proto3";

package nvidia.cheminformatics.grpc;

import "google/protobuf/empty.proto";

// python -m pip install grpcio
// python -m pip install grpcio-tools
// python -m grpc_tools.protoc -I./grpc/ \
//              --python_out=generated \
//              --experimental_allow_proto3_optional \
//              --grpc_python_out=generated \
//              ./proto/generativesampler.proto


enum GenerativeModel {
  CDDD = 0;
  MegaMolBART = 1;
  MolBART = 10000;
}


service GenerativeSampler {
  rpc SmilesToEmbedding(GenerativeSpec) returns (EmbeddingList) {};
  rpc EmbeddingToSmiles(EmbeddingList) returns (SmilesList) {};
  rpc FindSimilars(GenerativeSpec) returns (SmilesList) {};
  rpc Interpolate(GenerativeSpec) returns (SmilesList) {};
  rpc GetVersion(google.protobuf.Empty) returns (Version) {};
}


message GenerativeSpec {
  GenerativeModel model = 1;
  repeated string smiles = 2;
  optional float radius = 3;
  optional int32 numRequested = 4;
  optional int32 padding = 5;
  optional bool forceUnique = 6;
  optional bool sanitize = 7;
}


message SmilesList {
  repeated string generatedSmiles = 1;
  repeated EmbeddingList embeddings = 2;
}


message EmbeddingList{
  repeated float embedding = 1;
  repeated int32 dim = 2;
  repeated bool pad_mask = 3;
  repeated int32 tokens = 4;
}


message Version{
  string version = 1;
}

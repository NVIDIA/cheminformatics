#!/usr/bin/env bash
#
# Copyright (c) 2020-2021, NVIDIA CORPORATION.
# SPDX-License-Identifier: Apache-2.0

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

LOCAL_ENV=.env

usage() {
    cat <<EOF

USAGE: launch

Startup script
----------------------------------------

launch [command]

    valid commands:
        start
        stop
        cache


Getting Started tl;dr
----------------------------------------

    ./launch start

    navigate browser to http://localhost:5000


More Information
----------------------------------------
Note: This script looks for a file called $LOCAL_ENV in the
current directory. This file should define the following environment
variables:
    CUCHEM_CONT
        container image, prepended with registry. e.g.,
        cheminformatics_demo:latest
    MEGAMOLBART_CONT
        container image for MegaMolBART service, prepended with registry.
    DATA_PATH
        path to data directory. e.g.,
        /scratch/data/cheminformatics
    REGISTRY_ACCESS_TOKEN
        container registry access token. e.g.,
        Ckj53jGK...
    REGISTRY_USER
        container registry username. e.g.,
        astern
    REGISTRY
        container registry URL. e.g.,
        server.com/registry:5005

EOF
    exit
}

function version {
    echo "$@" | awk -F. '{ printf("%03d%03d%03d\n", $1,$2,$3); }';
}

if [ -e ./$LOCAL_ENV ]
then
    echo sourcing environment from ./$LOCAL_ENV
    . ./$LOCAL_ENV
    write_env=0
else
    echo $LOCAL_ENV does not exist. Writing deafults to $LOCAL_ENV
    write_env=1
fi

CUCHEM_CONT=${CUCHEM_CONT:=nvcr.io/nv-drug-discovery-dev/cheminformatics_demo:latest}
MEGAMOLBART_CONT=${MEGAMOLBART_CONT:=nvcr.io/nv-drug-discovery-dev/megamolbart:latest}
CONTENT_PATH=${CONTENT_PATH:=$(pwd)}
DATA_MOUNT_PATH=${DATA_MOUNT_PATH:=/data}
PLOTLY_PORT=${PLOTLY_PORT:-5000}
DASK_PORT=${DASK_PORT:-9001}
SUBNET=${SUBNET:=192.168.100.0/16}
IP_CUCHEM_UI=${IP_CUCHEM_UI:=192.168.100.1}
IP_MEGAMOLBART=${IP_MEGAMOLBART:=192.168.100.2}

if [ $write_env -eq 1 ]; then
    echo CUCHEM_CONT=${CUCHEM_CONT} >> $LOCAL_ENV
    echo MEGAMOLBART_CONT=${MEGAMOLBART_CONT} >> $LOCAL_ENV
    echo CONTENT_PATH=${CONTENT_PATH} >> $LOCAL_ENV
    echo DATA_MOUNT_PATH=${DATA_MOUNT_PATH} >> $LOCAL_ENV
    echo PLOTLY_PORT=${PLOTLY_PORT} >> $LOCAL_ENV
    echo DASK_PORT=${DASK_PORT} >> $LOCAL_ENV
    echo SUBNET=${SUBNET} >> $LOCAL_ENV
    echo IP_CUCHEM_UI=${IP_CUCHEM_UI} >> $LOCAL_ENV
    echo IP_MEGAMOLBART=${IP_MEGAMOLBART} >> $LOCAL_ENV
    echo REGISTRY=nvcr.io >> $LOCAL_ENV
    echo REGISTRY_USER="'\$oauthtoken'" >> $LOCAL_ENV
    echo REGISTRY_ACCESS_TOKEN= >> $LOCAL_ENV
fi

# Compare Docker version to find Nvidia Container Toolkit support.
# Please refer https://github.com/NVIDIA/nvidia-docker

PARAM_RUNTIME="--runtime=nvidia"
DOCKER_VERSION_WITH_GPU_SUPPORT="19.03.0"
if [ -x "$(command -v docker)" ]; then
    DOCKER_VERSION=$(docker version | grep -i version | head -1 | awk '{print $2'})
    if [ "$(version "$DOCKER_VERSION_WITH_GPU_SUPPORT")" -gt "$(version "$DOCKER_VERSION")" ]; then
        PARAM_RUNTIME="--gpus all"
    fi
else
    echo 'Please install docker'
    exit 1
fi

DOCKER_COMPOSE_SUPPORTED="1.29.1"
if [ -x "$(command -v docker-compose)" ]; then
    DOCKER_COMPOSE_VERSION=$(docker-compose version --short)
    if [ "$(version "$DOCKER_COMPOSE_SUPPORTED")" -gt "$(version "$DOCKER_COMPOSE_VERSION")" ]; then
        echo "Please upgrade docker-compose to ${DOCKER_COMPOSE_SUPPORTED} from https://docs.docker.com/compose/install/."
        exit 1
    fi
else
    echo "Please install docker-compose. Version ${DOCKER_COMPOSE_SUPPORTED} or better. https://docs.docker.com/compose/install/"
    exit 1
fi

if [ ! -x "$(command -v ngc)" ]; then
    echo "Please install NGC CLI."
    exit 1
fi

DATA_PATH="${CONTENT_PATH}/data"
MODEL_PATH="${CONTENT_PATH}/models"
MODEL_NAME='megamolbart:0.1'
DOCKER_CMD="docker run \
    --rm \
    --network host \
    ${PARAM_RUNTIME} \
    -p ${DASK_PORT}:${DASK_PORT} \
    -p ${PLOTLY_PORT}:5000 \
    -v ${DATA_PATH}:${DATA_MOUNT_PATH} \
    -v ${MODEL_PATH}/${MODEL_NAME}:/models \
    -u $(id -u ${USER}):$(id -g ${USER}) \
    --shm-size=1g \
    --ulimit memlock=-1 \
    --ulimit stack=67108864 \
    -e HOME=/workspace \
    -e TF_CPP_MIN_LOG_LEVEL=3 \
    -w /workspace"


dbSetup() {
    local DATA_DIR=$1

    if [[ ! -e "${DATA_DIR}/db/chembl_27.db" ]]; then
        echo "Downloading chembl db to ${DATA_DIR}..."
        mkdir -p ${DATA_DIR}/db
        if [[ ! -e "${DATA_DIR}/chembl_27_sqlite.tar.gz" ]]; then
            wget -q --show-progress \
                -O ${DATA_DIR}/chembl_27_sqlite.tar.gz \
                ftp://ftp.ebi.ac.uk/pub/databases/chembl/ChEMBLdb/releases/chembl_27/chembl_27_sqlite.tar.gz
            return_code=$?
            if [[ $return_code -ne 0 ]]; then
                echo 'ChEMBL database download failed. Please check network settings and disk space(25GB).'
                rm -rf ${DATA_DIR}/chembl_27_sqlite.tar.gz
                exit $return_code
            fi
        fi

        wget -q --show-progress \
            -O ${DATA_DIR}/checksums.txt \
            ftp://ftp.ebi.ac.uk/pub/databases/chembl/ChEMBLdb/releases/chembl_27/checksums.txt
        echo "Unzipping chembl db to ${DATA_DIR}..."

        CURR_DIR=$PWD;
        if cd ${DATA_DIR}; sha256sum --check --ignore-missing --status ${DATA_DIR}/checksums.txt;
        then
            tar -C ${DATA_DIR}/db \
                --strip-components=2 \
                -xf ${DATA_DIR}/chembl_27_sqlite.tar.gz chembl_27/chembl_27_sqlite/chembl_27.db
            return_code=$?
            if [[ $return_code -ne 0 ]]; then
                echo 'ChEMBL database extraction faile. Please cleanup ${DATA_DIR} directory and retry.'
                rm -rf ${DATA_DIR}/chembl_27_sqlite.tar.gz
                exit $return_code
            fi
        else
            echo "Please clean ${DATA_DIR} directory and retry."
            exit 1
        fi
        cd ${CURR_DIR}
    fi
}


download_model() {
    set -e
    if [[ ! -e "${MODEL_PATH}" ]]; then
        mkdir -p ${MODEL_PATH}
        echo "Downloading model ${MODEL_NAME}..."
        ngc registry model download-version \
            --dest ${MODEL_PATH} \
            "nv-drug-discovery-dev/${MODEL_NAME}"
    fi
    set +e
}


start() {
    # run a container and start dash inside container.
    echo "${CUCHEM_CONT} ${MEGAMOLBART_CONT}"
    export ADDITIONAL_PARAM="$@"

    if [ -z ${REGISTRY_ACCESS_TOKEN} ]; then
        echo "Please ensure 'REGISTRY_ACCESS_TOKEN' in $LOCAL_ENV is correct and rerun this script. Please set NGC API key to REGISTRY_ACCESS_TOKEN."
        exit
    else
        echo "Attempting docker login to ${REGISTRY}."
    fi

    docker login ${REGISTRY} -u ${REGISTRY_USER} -p ${REGISTRY_ACCESS_TOKEN}
    if [[ $? -ne 0 ]]; then
        echo "Docker login failed. Please check network settings and ensure 'REGISTRY_ACCESS_TOKEN' is $LOCAL_ENV is correct."
        exit 1
    fi

    download_model
    dbSetup ${DATA_PATH}
    docker-compose --env-file .env  \
        -f docker_compose.yml \
        --project-directory . \
        up
}


stop() {
    docker-compose --env-file .env  \
        -f docker_compose.yml \
        --project-directory . \
        down
}


cache() {
    if [[ -d "/opt/nvidia/cheminfomatics" ]]; then
        set -x
        # Executed within container or a managed env.
        dbSetup "${DATA_MOUNT_PATH}"
        cd ${CUCHEM_LOC}; python3 startdash.py cache $@
    else
        dbSetup "${DATA_PATH}"
        # run a container and start dash inside container.
        ${DOCKER_CMD} -it ${CUCHEM_CONT} ./launch.sh cache $@
    fi
    exit
}


case $1 in
    start)
        $@
        ;;
    stop)
        ;&
    cache)
        $@
        ;;
    -h|--help)
        usage
        ;;
    *)
        start
        ;;
esac
